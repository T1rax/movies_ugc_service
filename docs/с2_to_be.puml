@startuml

title [C2]: TO BE

autonumber
skinparam sequenceMessageAlign center

actor user as user

box Movies (My) #LightGray
participant my_movies_front as my_movies_front
participant auth_api as auth_api
participant async_api as async_api
end box

user -> my_movies_front : click login button
my_movies_front -> auth_api : [post] user login
my_movies_front <-- auth_api: response user data and set cookie access_token
my_movies_front -> async_api : [get][headers: Cookie access_token] film_id
my_movies_front <-- async_api: response film

|||

box UGC Service #lightBlue
participant ugc_api as ugc_api
participant kafka_producer as kafka_producer
database postgresql_db as postgresql_db
queue kafka as kafka
database clickhouse_db as clickhouse_db
end box

autonumber 1
group post
my_movies_front -> ugc_api: [post] ugc request
note right of my_movies_front
Расшифровывает с помощью
публичного ключа access_token
из кук и получаем user_id
end note
activate ugc_api
ugc_api -> kafka_producer: deliver event
activate kafka_producer
kafka_producer -> kafka: publish event
activate kafka
kafka_producer -> postgresql_db: insert or update user activity
activate postgresql_db
kafka_producer <-- postgresql_db: return
deactivate postgresql_db
kafka_producer <-- kafka: return
deactivate kafka
ugc_api <-- kafka_producer: return
deactivate kafka_producer
my_movies_front <-- ugc_api: response OK
deactivate ugc_api
end

autonumber 2
group get
my_movies_front -> ugc_api: [get] ugc request
note right of my_movies_front
Расшифровывает с помощью
публичного ключа access_token
из кук и получаем user_id
end note
activate ugc_api
ugc_api -> postgresql_db: select last user activity
activate postgresql_db
ugc_api <-- postgresql_db: return user activity
deactivate postgresql_db
my_movies_front <-- ugc_api: response
deactivate ugc_api
end

user <-- my_movies_front: response save or get activity OK

@enduml
